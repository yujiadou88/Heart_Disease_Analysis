## For categorical variables, perform a Chi-square test
y[is.na(y)] <- ""
p <- chisq.test(table(y, g))$p.value
}
## Format the p-value, using an HTML entity for the less-than sign.
## The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
# Table settings---------------------------------------------------------------
units(ChangeEHR$First_SBP) <- "mm Hg"
units(ChangeEHR$First_DBP) <- "mm Hg"
units(ChangeEHR$Last_SBP) <- "mm Hg"
units(ChangeEHR$Last_DBP) <- "mm Hg"
units(ChangeEHR$Change_SBP) <- "mm Hg"
units(ChangeEHR$Change_DBP) <- "mm Hg"
label(ChangeEHR$First_SBP) <- "First clinic SBP"
label(ChangeEHR$First_DBP) <- "First clinic DBP"
label(ChangeEHR$Last_SBP) <- "Most recent SBP"
label(ChangeEHR$Last_DBP) <- "Most recent DBP"
label(ChangeEHR$Change_SBP) <- "Change in SBP"
label(ChangeEHR$Change_DBP) <- "Change in DBP"
label(ChangeEHR$Last_BP_Group_130) <- "Last clinic BP <130/80 mm Hg"
label(ChangeEHR$Last_BP_Group_140) <- "Last clinic BP <140/90 mm Hg"
units(ChangeSMBP$First_SBP) <- "mm Hg"
units(ChangeSMBP$First_DBP) <- "mm Hg"
units(ChangeSMBP$Last_SBP) <- "mm Hg"
units(ChangeSMBP$Last_DBP) <- "mm Hg"
units(ChangeSMBP$Change_SBP) <- "mm Hg"
units(ChangeSMBP$Change_DBP) <- "mm Hg"
label(ChangeSMBP$First_SBP) <- "First self-measured SBP"
label(ChangeSMBP$First_DBP) <- "First self-measured DBP"
label(ChangeSMBP$Last_SBP) <- "Most recent self-measured SBP"
label(ChangeSMBP$Last_DBP) <- "Most recent self-measured DBP"
label(ChangeSMBP$Change_SBP) <- "Change in SBP"
label(ChangeSMBP$Change_DBP) <- "Change in DBP"
label(ChangeSMBP$Last_BP_Group_130) <- "Last self-measured BP <130/80 mm Hg"
label(ChangeSMBP$Last_BP_Group_140) <- "Last self-measured <140/90 mm Hg"
# Generate tables---------------------------------------------------------------
table1(~ First_SBP + First_DBP + Last_SBP + Last_DBP + Change_SBP + Change_DBP + Last_BP_Group_130 + Last_BP_Group_140 | First_BP_Group_140, data = ChangeEHR,
#overall = F, extra.col = list("p-value"=paired.pvalue),
render.continuous=my.render.cont, render.categorical=my.render.cat,
render.missing = NULL,
)
table1(~ First_SBP + First_DBP + Last_SBP + Last_DBP + Change_SBP + Change_DBP + Last_BP_Group_130 + Last_BP_Group_140 | First_BP_Group_140, data = ChangeSMBP,
#overall = F, extra.col = list("p-value"=paired.pvalue),
render.continuous=my.render.cont, render.categorical=my.render.cat,
render.missing = NULL,
)
# Derive p values---------------------------------------------------------------
t.test(ChangeEHR$First_SBP, ChangeEHR$Last_BPP)
View(BPData)
View(BPData)
lm1 <-lmer(SBP ~ Phase + Measure_Freq_Group + Phase*Measure_Freq_Group + (1| ID),
data = BPData )
library(Matrix)
lm1 <-lmer(SBP ~ Phase + Measure_Freq_Group + Phase*Measure_Freq_Group + (1| ID),
data = BPData )
install.packages("Matrix")
install.packages("Matrix")
oo <- options(repos = "https://cran.r-project.org/")
utils::install.packages("Matrix")
utils::install.packages("lme4")
options(oo)
setwd("D:\\ms\\Grady Project\\data")
#setwd('~/Library/CloudStorage/OneDrive-EmoryUniversity/General - CDC_HDP_Project_Enhanced_CHW_Support/Summer 2024/CODE/')
library(openxlsx)
library(dplyr)
library(tidyr)
library(table1)
library(ggplot2)
setwd("D:\\ms\\Grady Project\\data")
#setwd('~/Library/CloudStorage/OneDrive-EmoryUniversity/General - CDC_HDP_Project_Enhanced_CHW_Support/Summer 2024/CODE/')
library(openxlsx)
library(dplyr)
library(tidyr)
library(table1)
library(ggplot2)
install.packages("ggplot2")
library
library(cowplot)
install.packages("cowplot")
install.packages(:ggpubr)
library(ggpubr)
install.packages("ggpubr")
install.packages("rstatix")
install.packages("patchwork")
install.packages("lmerTest")
install.packages("lme4")
library(lme4)
install.packages("nlme")
library(nlme)
library(Matrix)
setwd("D:\\ms\\Grady Project\\data")
#setwd('~/Library/CloudStorage/OneDrive-EmoryUniversity/General - CDC_HDP_Project_Enhanced_CHW_Support/Summer 2024/CODE/')
library(openxlsx)
library(dplyr)
library(tidyr)
library(table1)
library(ggplot2)
library(cowplot)
library(ggpubr)
library(ggpubr)
install.packages("ggpubr")
library
setwd("D:\\ms\\Grady Project\\data")
#setwd('~/Library/CloudStorage/OneDrive-EmoryUniversity/General - CDC_HDP_Project_Enhanced_CHW_Support/Summer 2024/CODE/')
library(openxlsx)
library(dplyr)
library(tidyr)
library(table1)
library(ggplot2)
library(cowplot)
library(ggpubr)
library(rstatix)
sessionInfo()
# set working directory
setwd("D://ms//capstone//data")
# library packages
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggExtra)
library(nimble)
library(coda)
library(purrr)
# read data---------------------------------------------------------------------
misclass_agg <- readRDS("misclass_agg.RDS")
# group data by state and retrieve statistics-----------------------------------
misclass_state <- misclass_agg %>%
group_by(state_rev) %>%                  # group data by state
summarise(TP_count = sum(TP_count),
FP_count = sum(FP_count),
FN_count = sum(FN_count),
UP_count = sum(UP_count),
UN_count = sum(UN_count),
tot = sum(tot),
true_count = sum(true_count),
pmss_count = sum(pmss_count)
) %>%                          # aggregate count data
mutate(sens = TP_count / (TP_count + FN_count),
FP_rate = FP_count / tot,
UP_rate = UP_count / (UP_count + UN_count)) # calculate rates
#saveRDS(misclass_state,"miscalss_state.RDS")
p <- ggplot(misclass_state %>%
select(state_rev,sens, FP_rate, UP_rate) %>%
pivot_longer(cols = c(sens, FP_rate, UP_rate), names_to = "category", values_to = "rates"),
aes(x = state_rev, y = rates, color = category,  shape = category)) +
geom_point() +
scale_color_manual(values = c("red", "blue", "green"), labels = c("UP/(UP+UN)", "Sensitivity", "FP/total deaths")) +
scale_shape_manual(values = c(16, 17, 18), labels = c("UP/(UP+UN)", "Sensitivity", "FP/total deaths")) +
labs(color = "Category", shape = "Category",
x = "State", y = "Rate") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
theme(legend.position = "top")
set.seed(123)
# Define the nimble code--------------------------------------------------------
code <- nimbleCode({
for (s in 1:S) {
for (t in 1:T[s]) {
# Multinomial likelihood
counts[s, t, 1:K] ~ dmulti(rho[s, t, 1:K], N[s,t])
# Define rho's with the uniform prior
for (k in 1:K) {
# Normalize to make rho sum to 1
rho[s, t, k] <- rho_raw[s, t, k] / sum(rho_raw[s, t, 1:K])
# Uniform prior for rho_raw
rho_raw[s, t, k] ~ dunif(0, 1)
}
}
}
})
# Initialize constants and data-------------------------------------------------
# Constants
T <- misclass_agg %>%
filter(!is.na(state_rev)) %>%
group_by(state_rev) %>%
summarize(T = n_distinct(year_rev)) %>%
pull(T) # Number of years by state
S <- length(T) # Number of states
K <- 5 # Number of categories:TP, FP, FN, UP, UN
N <- misclass_agg %>%
filter(!is.na(state_rev)) %>%
select(c(state_rev,year_rev,tot)) %>%
pivot_wider(names_from = year_rev, values_from = tot, values_fill = NA)
N <- as.matrix(N[,-1])
constants <- list(S = S, T = T, K = K, N = N)
# Multinomial counts
counts <- misclass_agg %>%
filter(!is.na(state_rev)) %>%
select(c(state_rev,year_rev,TP_count,FP_count,FN_count,UP_count,UN_count)) %>%
group_by(state_rev) %>%
nest() %>%
mutate(count_matrix = map(data, ~ as.matrix(select(.x, ends_with("count"))))) %>%
pull(count_matrix)
counts_array <- array(NA, dim = c(S, max(T), K))
for (s in 1:S) {
counts_array[s, 1:T[s], ] <- counts[[s]]
if (T[s] < max(T)) {
counts_array[s, (T[s] + 1):max(T), ] <- NA
}
}
data <- list(counts = counts_array)
# specify initial parameters
rho_raw <- array(NA, dim = c(S, 4, K))
for (s in 1:S) {
rho_raw[s, 1:T[s], ] <- array(runif(T[s] * K, 0.1, 1), dim = c(T[s], K))
if (T[s] < 4) {
rho_raw[s, (T[s] + 1):4, ] <- NA
}
}
inits <- list(rho_raw = rho_raw)
# Create and run model----------------------------------------------------------
fit <- nimbleMCMC(code = code,
data = data,
inits = inits,
constants = constants,
monitors = c("rho"), #tell nimble parameters you want to monitor/estimate
nchains = 5, #Number of chains gives the number of MCMC sequences
thin = 10,
niter = 2000, #Number of iterations per chains
nburnin = 1000, #Number of iterations to remove from the beginning to reduce noise
progressBar = FALSE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE)
counts[[22]]
counts[[29]]
N
View(misclass_state)
View(misclass_agg)
View(misclass_agg)
View(misclass_state)
# Multinomial counts
counts <- misclass_agg %>%
filter(!is.na(state_rev)) %>%
select(c(state_rev,year_rev,TP_count,FP_count,FN_count,UP_count,UN_count,tot)) %>%
mutate(tot_count = tot) %>%
group_by(state_rev) %>%
nest() %>%
mutate(count_matrix = map(data, ~ as.matrix(select(.x, ends_with("count"))))) %>%
pull(count_matrix)
View(counts)
# Multinomial counts
counts <- misclass_agg %>%
filter(!is.na(state_rev)) %>%
select(c(state_rev,year_rev,TP_count,FP_count,FN_count,UP_count,UN_count)) %>%
group_by(state_rev) %>%
nest() %>%
mutate(count_matrix = map(data, ~ as.matrix(select(.x, ends_with("count"))))) %>%
pull(count_matrix)
N <- misclass_agg %>%
filter(!is.na(state_rev)) %>%
select(tot)
N <- misclass_agg %>%
filter(!is.na(state_rev)) %>%
select(c(state_rev,tot)) %>%
group_by(state_rev) %>%
constants <- list(S = S, T_s = T_s, K = K, N = N)
N <- misclass_agg %>%
filter(!is.na(state_rev)) %>%
select(c(state_rev,tot)) %>%
group_by(state_rev)
View(N)
N <- misclass_agg %>%
filter(!is.na(state_rev)) %>%
select(c(state_rev,tot)) %>%
group_by(state_rev) %>%
nest()
View(N)
View(N)
is.array(N)
is.list(N)
N <- array(N)
N
N <- misclass_agg %>%
filter(!is.na(state_rev)) %>%
select(c(state_rev,tot)) %>%
mutate(tot_count = tot)
View(N)
# set working directory
# library packages
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggExtra)
library(nimble)
library(coda)
library(purrr)
library(here)
# read data---------------------------------------------------------------------
misclass_agg <- readRDS(here("data", "misclass_agg.RDS"))
library(here)
# read data---------------------------------------------------------------------
misclass_agg <- readRDS(here("data", "misclass_agg.RDS"))
install.packages("here")
library(here)
# set working directory
# library packages
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggExtra)
library(nimble)
library(coda)
library(purrr)
library(here)
# read data---------------------------------------------------------------------
misclass_agg <- readRDS(here("data", "misclass_agg.RDS"))
# read data---------------------------------------------------------------------
misclass_agg <- readRDS(here("data", "misclass_agg.RDS"))
# read data---------------------------------------------------------------------
misclass_agg <- readRDS("data/misclass_agg.RDS")
# read data---------------------------------------------------------------------
misclass_agg <- readRDS("misclass_agg.RDS")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(table1)
# Set path to dataset
path <- "path_to_dataset/heart_disease.csv" # Update this with the correct path
# Load the dataset
data_hd <- read_csv(path)
library(readr)
library(dplyr)
library(ggplot2)
library(table1)
library(here)
here::i_am("/Code/Heart_Disease_Analysis.rmd")
here::i_am("/Code/Heart_Disease_Analysis.Rmd")
here::i_am("Code/Heart_Disease_Analysis.Rmd")
# Load the dataset
data_hd <- read_csv(here("Data/heart_disease"))
# Load the dataset
data_hd <- read_csv(here("Data/heart_disease.xls"))
# Load the dataset
data_hd <- read_excel(here("Data/heart_disease.xls"))
library(readxl)
# Load the dataset
data_hd <- read_excel(here("Data/heart_disease.xls"))
# Load the dataset
data_hd <- read_excel(here("Data/heart_disease.xlsx"))
# Load the dataset
data_hd <- read_csv(here("Data/heart_disease.csv"))
View(data_hd)
# Load the dataset
data_hd <- read_csv(here("Data/heart_disease.csv"))
# Load the dataset
data_hd <- read_csv(here("Data/heart_disease.csv"))
# View first few rows
head(data_hd)
View(data_hd)
View(data_hd)
colnames(data_hd)
knitr::opts_chunk$set(echo = TRUE)
# Define labels
table1(~ Age + Gender + `Exercise Habits` + `Smoking` +
`Alcohol Consumption` + `Stress Level` + `Sleep Hours` +
`Family Heart Disease` + `Diabetes` + `BMI` +
`Blood Pressure` + `Cholesterol Level` +
+ `Heart Disease Status`,
data = data_hd)
# Define labels
table1(~ Age + Gender + `Exercise Habits` + `Smoking` +
`Alcohol Consumption` + `Sugar Consumption` + `Stress Level` +
`Sleep Hours` + `Family Heart Disease` + `Diabetes` + `BMI` +
`Blood Pressure` + `Cholesterol Level` | `Heart Disease Status` ,
data = data_hd,
overall = F)
View(data_hd)
colSums(is.na(data_hd))
# Drop rows with any missing values
data_hd_cleaned <- na.omit(data_hd)
# Factorize variables
data_hd_cleaned$`Heart Disease Status` <-
factor(data_hd_cleaned$`Heart Disease Status`,
levels = c("No","Yes"),
labels = c("No Heart Disease", "Heart Disease"))
# Define labels
table1(~ Age + Gender + `Exercise Habits` + `Smoking` +
`Alcohol Consumption` + `Sugar Consumption` + `Stress Level` +
`Sleep Hours` + `Family Heart Disease` + `Diabetes` + `BMI` +
`Blood Pressure` + `Cholesterol Level` | `Heart Disease Status` ,
data = data_hd_cleaned,
overall = F)
View(data_hd_cleaned)
colnames(data_hd_cleaned)
# Define function for p-values
pvalue <- function(x, ...) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(x)
g <- factor(rep(1:length(x), times=sapply(x, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- t.test(y ~ g)$p.value
} else {
# For categorical variables, perform a chi-squared test of independence
p <- chisq.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
# Define labels
table1(~ Age + Gender + `Exercise Habits` + `Smoking` +
`Alcohol Consumption` + `Sugar Consumption` + `Stress Level` +
`Sleep Hours` + `Family Heart Disease` + `Blood Pressure` +
`Cholesterol Level`+ `Low HDL Cholesterol` + `High LDL Cholesterol` +
`Diabetes` + `BMI` + `Triglyceride Level` + `Fasting Blood Sugar` +
`CRP Level` + `Homocysteine Level` | `Heart Disease Status` ,
data = data_hd_cleaned,
overall = F, extra.col = list(`P-value`=pvalue))
# Define labels
table1(~ Age + Gender + `Exercise Habits` + `Smoking` +
`Alcohol Consumption` + `Sugar Consumption` + `Stress Level` +
`Sleep Hours` + `Family Heart Disease` + `Blood Pressure` +
`Cholesterol Level`+ `Low HDL Cholesterol` + `High LDL Cholesterol` +
`Diabetes` + `BMI` + `Triglyceride Level` + `Fasting Blood Sugar` +
`CRP Level` + `Homocysteine Level` ,
data = data_hd_cleaned)
# Define labels
table1(~ Age + Gender + `Exercise Habits` + `Smoking` +
`Alcohol Consumption` + `Sugar Consumption` + `Stress Level` +
`Sleep Hours` + `Family Heart Disease` + `Blood Pressure` +
`Cholesterol Level`+ `Low HDL Cholesterol` + `High LDL Cholesterol` +
`Diabetes` + `BMI` + `Triglyceride Level` + `Fasting Blood Sugar` +
`CRP Level` + `Homocysteine Level` + `Heart Disease Status`,
data = data_hd_cleaned)
# Create a boxplot of cholesterol level by heart disease status
ggplot(data_hd_cleaned, aes(x = `Heart Disease Status`, y = `Cholesterol Level`, fill = `Heart Disease Status`)) +
geom_boxplot() +
labs(title = "Cholesterol Levels by Heart Disease Status",
x = "Heart Disease Status",
y = "Cholesterol Level") +
theme_minimal()
# Create a bar plot comparing heart disease status by gender
ggplot(df, aes(x = Gender, fill = `Heart Disease Status`)) +
geom_bar(position = "dodge") +
labs(title = "Comparison of Heart Disease Status by Gender",
x = "Gender",
y = "Count") +
theme_minimal()
# Create a bar plot comparing heart disease status by Stress Level
ggplot(data_hd_cleaned, aes(x = `Stress Level`, fill = `Heart Disease Status`)) +
geom_bar(position = "dodge") +
labs(title = "Comparison of Heart Disease Status by Stress Level",
x = "Stress Level",
y = "Count") +
theme_minimal()
# Create a bar plot comparing heart disease status by Stress Level
ggplot(data_hd_cleaned, aes(x = `Stress Level`, fill = `Heart Disease Status`)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = percent) +
labs(title = "Comparison of Heart Disease Status by Stress Level",
x = "Stress Level",
y = "%") +
theme_minimal()
library(scales)
# Create a bar plot comparing heart disease status by Stress Level
ggplot(data_hd_cleaned, aes(x = `Stress Level`, fill = `Heart Disease Status`)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = percent) +
labs(title = "Comparison of Heart Disease Status by Stress Level",
x = "Stress Level",
y = "%") +
theme_minimal()
data_hd_cleaned$`Exercise Habits` <-
factor(data_hd_cleaned$`Exercise Habits`, levels = c("Low", "Medium", "High"))
data_hd_cleaned$`Alcohol Consumption` <-
factor(data_hd_cleaned$`Alcohol Consumption`, levels = c("None","Low", "Medium", "High"))
data_hd_cleaned$`Sugar Consumption` <-
factor(data_hd_cleaned$`Sugar Consumption`, levels = c("Low", "Medium", "High"))
data_hd_cleaned$`Stress Level` <-
factor(data_hd_cleaned$`Stress Level`, levels = c("Low", "Medium", "High"))
# Define labels
table1(~ Age + Gender + `Exercise Habits` + `Smoking` +
`Alcohol Consumption` + `Sugar Consumption` + `Stress Level` +
`Sleep Hours` + `Family Heart Disease` + `Blood Pressure` +
`Cholesterol Level`+ `Low HDL Cholesterol` + `High LDL Cholesterol` +
`Diabetes` + `BMI` + `Triglyceride Level` + `Fasting Blood Sugar` +
`CRP Level` + `Homocysteine Level` + `Heart Disease Status`,
data = data_hd_cleaned)
# Create a bar plot comparing heart disease status by Stress Level
ggplot(data_hd_cleaned, aes(x = `Stress Level`, fill = `Heart Disease Status`)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = percent) +
labs(title = "Comparison of Heart Disease Status by Stress Level",
x = "Stress Level",
y = "%") +
theme_minimal()
library(kableExtra)
# Create table
tb1 <- table1(~ Age + Gender + `Exercise Habits` + `Smoking` +
`Alcohol Consumption` + `Sugar Consumption` + `Stress Level` +
`Sleep Hours` + `Family Heart Disease` + `Blood Pressure` +
`Cholesterol Level`+ `Low HDL Cholesterol` + `High LDL Cholesterol` +
`Diabetes` + `BMI` + `Triglyceride Level` + `Fasting Blood Sugar` +
`CRP Level` + `Homocysteine Level` + `Heart Disease Status`,
data = data_hd_cleaned)
tbl %>%
kable("latex", booktabs = TRUE, longtable = TRUE) %>%
kable_styling(latex_options = c("repeat_header", "hold_position"))
tb1_output <- capture.output(tb1)
cat("\\begin{verbatim}", sep = "\n")
cat(table_output, sep = "\n")
cat("\\begin{verbatim}", sep = "\n")
cat(tb1_output, sep = "\n")
cat("\\end{verbatim}", sep = "\n")
setwd("D:/ms/course/DATA550/Final_Project")
install.packages("readr")
# Load packages
library(readr)
